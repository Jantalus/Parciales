Este enunciado tiene más funcionalidad que lo que se tomo finalmente, pero sirve si desean practicar más.
----
Debemos desarrollar el sistema de asignación de horarios de trabajo de los empleados de las tiendas de una empresa de comida rápida.
El sistema debe permitir que los empleados asignen a su planilla de horarios de trabajo, la disponibilidad que tienen para trabajar por semana de la siguiente manera:
1) De un día de semana a otro, en cierta franja horaria. Por ejemplo:
    - Para la semana del 15/7/2019, de Lunes a Viernes, de 8 a 16 hrs.
    - Para la semana del 22/7/2019, de Jueves a Domingo, de 13 a 22 hrs.
2) Por días puntuales de la semana, en cierta franja horaria. Por ejemplo:
    - Para la semana del 15/7/2019, Lunes de 8 a 16 hrs, Martes de 10 a 18 hrs, Miércoles de 13 a 22 hrs, etc.

La semana se determina por la fecha de inicio, que siempre debe ser un lunes (por eso en los ejemplo se usa 15/7/2019 y 22/7/2019 que son lunes).
Lo horarios de inicio y fin de trabajo siempre deben ser al inicio de una hora, por lo tanto una hora de inicio de 8:30 es inválida lo mismo que una hora de fin de 16:01.
El horario de trabajo debe estar comprendida entre las 7:00 am y las 23:00 pm.

El objetivo principal de la planilla de horario de trabajo de un empleado es la de responder si dicho empleado trabaja o no en cierta fecha y hora. Para el ejemplo 1), se espera los siguientes resultado:
- Trabaja el 15/7/2019 a las 7:59:59? -> No
- Trabaja el 15/7/2019 a las 8:00? -> Si
- Trabaja el 15/7/2019 a las 9:30? -> Si
- Trabaja el 15/7/2019 a las 16:00? -> No
Nótese que el horario de trabajo excluye la última hora.

Cada tienda conoce las planilla de trabajo de los empleados que trabajan en ella y esto es usado para que el gerente de la tienda pueda:
1) Conocer en una semana particular, qué horarios no están cubiertos por ninguno de los empleados.
2) Conocer en una semana particular, que empleados trabajan menos de 40 horas.

Por ejemplo, dado que en la Tienda de Florida y Cordoba trabajan Ana Perez y Martin Gonzalez, y que la semana del 15/7/2019 tiene la siguiente asignación de horarios:
- Ana Perez: Lunes de 8 a 23 hrs., Martes de 7 a 23 hrs., Miércoles de 7 a 23 hrs, Jueves de 7 a 23 hrs, Viernes de 7 a 23 hrs, Sábado de 7 a 23 hrs, Domingo de 7 a 22 hrs.
- Martin Gonzalez: Lunes a Miércoles de 8 a 16 hrs.
1) Si se consulta por los horarios no cubiertos en la semana del 15/7/2019 debería devolver la colección: { 15/7/2019 at: 7:00. 21/7/2019 at: 22 }
(La revisión de horas debe hacerse cada 1 hora, o sea a las 7:00, 8:00, 9:00 y así hasta las 22:00)
2) Si se consulta por los que trabajan menos de 40 hrs. en la semana del 15/7/2019 debería devolver una colección que solo contenga a Martin Gonzalez

 Implementar el modelo que satisfaga estas necesidades usando TDD.

Ayudas:
1) July/15/2019 crea la fecha 15 de Julio de 2019
2) 10:59:58 crea la hora 10 minuto 59, segundo 59
3) July/15/2019 at: 10:00 crea el día/hora del 15 de Julio de 2019 a las 10:00
4) July/15/2019 previous devuelve July/14/2019.
5) July/15/2019 next: 6*day devuelve July/21/2019
6) July/15/2019 nextDay: Sunday devuelve July/21/2019
7) (July/15/2019 at: 10:00) timeOfDay devuelve 10:00
8) (10:30:59) minutes devuelve 30*minute
9) (10:30:59) seconds devuelve 59*second
10) (10:30:59) timeFromMidnight devuelve una medida de tiempo desde las 0 horas
10) ((10:30:59) timeFromMidnight convertTo: hour) isAmountInteger devuelve false
11) July/15/2019 to: (July/15/2019 next: 6*day) devuelve un intervalo que incluye todas las fechas del 15 de Julio de 2019 al 21 de Julio de 2019, o sea las fechas de la semana del 15 de Julio de 2019.
